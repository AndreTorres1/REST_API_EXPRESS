{
  "swagger": "2.0",
  "info": {
    "title": "API REST MOVIES",
    "description": "This API allows for users to watch movies and TV shows, some specific users to edit certain movies and admin to manage all this users and movies ",
    "version": "1.0"
  },
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "token": {
      "type": "JWT",
      "name": "Authorization",
      "in": "header",
      "description": "Enter the authentication token"
    }

  },
  "parameters": {
    "id": {
      "name": "id",
      "in": "body",
      "description": "ID do filme ou utilizador",
      "required": true,
      "type": "string"
    },
    "email": {
      "name": "email",
      "description": "Email",
      "required": true,
      "in": "body",
      "type": "string"
    },
    "password": {
      "name": "password",
      "description": "Password",
      "required": true,
      "in": "header",
      "default": "12456"
    },
    "permissao": {
      "name": "permissao",
      "description": "Permissão",
      "required": true,
      "in": "header",
      "default": "user"
    },
    "type": {
      "name": "type",
      "description": "type movie",
      "required": true,
      "in": "header"
    },
    "title": {
      "name": "title",
      "description": "Title",
      "required": true,
      "in": "header"
    },
    "director": {
      "name": "director",
      "description": "Director",
      "required": true,
      "in": "header"
    }
  },
  "paths": {
    "/api/v1/admin/getUsers/": {
      "get": {
        "security": [],
        "description": "Retrieves all users registered in database",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          }
        ],
        "responses": {
          "200": {
            "description": "This endpoint always returns with success"
          },
          "404": {
            "description": "This endpoint does not returns any data"
          }
        }
      }
    },
    "/api/v1/admin/getUsersbyID/": {
      "get": {
        "description": "Retrieves a user with specific ID",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "If user exists"
          },
          "404": {
            "description": "If there is no user with the given ID"
          }
        }
      }
    },
    "/api/v1/admin/updateUser/": {
      "put": {
        "description": "update users by id",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "update ok"
          },
          "404": {
            "description": "error"
          }
        }
      }
    },
    "/api/v1/admin/movies/": {
      "get": {
        "description": "Retrieves all the movies",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves all the movies existents"
          },
          "404": {
            "description": "Error cathcing Movies"
          }
        }
      }
    },
    "/api/v1/admin/getMoviesByID/": {
      "get": {
        "description": "Retrieves movie with specific ID",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "If the movie exists, it retrieves its info"
          },
          "404": {
            "description": "If there is no movie with the given ID"
          }
        }
      }
    },
    "/api/v1/admin/getMovieByTitle/": {
      "get": {
        "description": "encontra filmes pelo titulo",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/title"
          }
        ],
        "responses": {
          "200": {
            "description": "If the movie exists, it retrieves its info"
          },
          "404": {
            "description": "If there is no movie with the given title"
          }
        }
      }
    },
    "/api/v1/admin/getMovieByRY/": {
      "get": {
        "description": "encontra filmes pelo titulo",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "If the movie exists, it retrieves its info"
          },
          "404": {
            "description": "If there is no movie with the given title"
          }
        }
      }
    },
    "/api/v1/userToken/admin/adminsList": {
      "get": {
        "description": "Obtem uma lista de admins",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Este endpoint retorna a lista de admins por defeito"
          }
        }
      }
    },
    "/api/v1/admin/postUser": {
      "post": {
        "description": "Faz a inserção de um novo utilizador",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/email"
          },
          {
            "$ref": "#/parameters/password"
          },
          {
            "$ref": "#/parameters/permissao"
          }
        ],
        "responses": {
          "200": {
            "description": "Este endpoint retorna um token junto com a informacao do utilizador"
          }
        }
      }
    },
    "/api/v1/admin/postMovie": {
      "post": {
        "description": "Faz a inserção de um novo filme com informações especificas",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/type"
          },
          {
            "$ref": "#/parameters/title"
          },
          {
            "$ref": "#/parameters/director"
          },
          {
            "$ref": "#/parameters/release_year"
          }
        ],
        "responses": {
          "200": {
            "description": "este endpoint retorna um filme novo"
          }
        }
      }
    },
    "/api/v1/admin/deleteUser/": {
      "delete": {
        "description": "Remove um utilizador através do ID",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Este endpoint retorna sempre com successo"
          },
          "400": {
            "description": "Erro ao apagar Utilizador[ID]"
          }
        }
      }
    },
    "/api/v1/admin/deletemovies/": {
      "delete": {
        "description": "Remove um utilizador através do ID",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "filme deletado com sucesso"
          },
          "400": {
            "description": "Erro ao apagar filme[ID]"
          }
        }
      }
    },
    "/api/v1/admin/getLastRecords/": {
      "get": {
        "description": "busca os top 10 filmes",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Este endpoint retorna sempre com successo"
          },
          "400": {
            "description": "Error"
          }
        }
      }
    },
    "_comment": "EDIT paths ",
    "/api/v1/edit/movies": {
      "get": {
        "description": "Retrieves all the movies",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves all the movies existents"
          },
          "404": {
            "description": "Error cathcing Movies"
          }
        }
      }
    },
    "/api/v1/edit/movies/:id": {
      "get": {
        "description": "Retrieves movie with specific ID",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "If the movie exists, it retrieves its info"
          },
          "404": {
            "description": "If there is no movie with the given ID"
          }
        }
      }
    },
    "/api/v1/edit/movies/title/:title": {
      "get": {
        "description": "Retrieves movie with specific title",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/title"
          }
        ],
        "responses": {
          "200": {
            "description": "If the title exists, it retrieves its info"
          },
          "404": {
            "description": "If there is no movie with the given title"
          }
        }
      }
    },
    "/api/v1/edit/postMovie": {
      "post": {
        "description": "Insert new movie database",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "If the movie exists, it retrieves its info"
          },
          "404": {
            "description": "If there is no movie with the given ID"
          }
        }
      }
    },
    "/api/v1/edit/deletemovies/:id": {
      "delete": {
        "description": "Delete movie database",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "If the movie deleted, returns SUCCESS"
          },
          "404": {
            "description": "If there is no movie with the given ID"
          }
        }
      }
    },
    "/api/v1/edit/updateMovies/:id": {
      "put": {
        "description": "Update data movie database",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "If the movie UPDATED"
          },
          "404": {
            "description": "If the movie not get UPDATED"
          }
        }
      }
    },
    "_comment": "VIEW paths ",
    "/api/v1/view/movies": {
      "get": {
        "description": "Retrieves all the movies",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves all the movies existents"
          },
          "404": {
            "description": "Error cathcing Movies"
          }
        }
      }
    },
    "/api/v1/view/movies/:title": {
      "get": {
        "description": "Retrieves movie with specific title",
        "parameters": [
          {
            "$ref": "#/parameters/userToken"
          },
          {
            "$ref": "#/parameters/title"
          }
        ],
        "responses": {
          "200": {
            "description": "If the title exists, it retrieves its info"
          },
          "404": {
            "description": "If there is no movie with the given title"
          }
        }
      }
    },
    "/api/v1/login": {
      "post": {
        "description": "Makes user login",
        "parameters": [
          {
            "$ref": "#/parameters/email"
          },
          {
            "$ref": "#/parameters/password"
          }
        ],
        "responses": {
          "200": {
            "description": "if users exists makes login and retrieve a token to authenticate"
          },
          "404": {
            "description": "if user fields is wrong message error or print error"
          }
        }
      }
    }
  }
}